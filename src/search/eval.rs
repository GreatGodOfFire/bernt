use crate::{
    bitloop,
    position::{PieceColor, PieceType, Position},
};

pub fn eval(pos: &Position) -> i32 {
    let mut eval = 0;

    bitloop!(pos.colors[0] | pos.colors[1] => sq, {
        let piece = pos.piece_at(sq);

        if piece.ty != PieceType::None {
            let sign = if piece.color == pos.side { 1 } else { -1 };
            eval += PSTS[piece.ty][flip(sq, piece.color) as usize] * sign;
        }
    });

    eval
}

#[inline]
pub(super) fn flip(sq: u8, side: PieceColor) -> u8 {
    if side == PieceColor::White {
        sq
    } else {
        sq ^ 56
    }
}

pub(super) const PSTS: [[i32; 64]; 6] = [PAWN, KNIGHT, BISHOP, ROOK, QUEEN, KING];

#[rustfmt::skip]
const PAWN: [i32; 64] = [
       0,    0,    0,    0,    0,    0,    0,    0,
      99,  116,  119,   95,  100,  116,  119,  116,
     102,  120,  110,   95,   98,   95,  120,  112,
     100,  114,  106,  115,  114,  117,  111,  118,
     120,  122,  110,  127,  111,  112,  126,  117,
     116,  116,  110,  115,  101,  121,  108,  119,
     111,  107,  110,  108,  105,  100,  103,  109,
       0,    0,    0,    0,    0,    0,    0,    0,
];
#[rustfmt::skip]
const KNIGHT: [i32; 64] = [
     298,  273,  292,  293,  301,  288,  262,  297,
     297,  306,  302,  285,  288,  299,  301,  295,
     286,  296,  301,  301,  302,  303,  297,  278,
     299,  299,  296,  321,  302,  303,  296,  301,
     299,  308,  309,  309,  326,  313,  298,  302,
     299,  296,  302,  307,  306,  298,  303,  299,
     299,  297,  300,  298,  295,  297,  298,  297,
     297,  299,  299,  299,  299,  301,  297,  298,
];
#[rustfmt::skip]
const BISHOP: [i32; 64] = [
     300,  302,  286,  300,  299,  288,  298,  297,
     302,  299,  311,  312,  312,  300,  298,  299,
     294,  305,  299,  311,  302,  308,  304,  302,
     297,  304,  316,  298,  312,  315,  304,  300,
     301,  316,  304,  303,  302,  310,  304,  304,
     305,  298,  306,  306,  302,  301,  302,  300,
     297,  307,  300,  300,  302,  307,  300,  299,
     301,  299,  300,  299,  301,  297,  299,  298,
];
#[rustfmt::skip]
const ROOK: [i32; 64] = [
     458,  483,  485,  505,  505,  512,  485,  471,
     461,  493,  495,  495,  508,  504,  498,  475,
     498,  495,  503,  497,  501,  507,  497,  484,
     497,  499,  504,  507,  499,  506,  503,  500,
     502,  497,  504,  502,  501,  501,  500,  498,
     505,  502,  506,  504,  507,  503,  502,  509,
     500,  505,  505,  499,  501,  503,  500,  501,
     477,  475,  481,  482,  483,  490,  488,  496,
];
#[rustfmt::skip]
const QUEEN: [i32; 64] = [
     899,  889,  882,  890,  897,  897,  898,  896,
     900,  893,  908,  895,  901,  896,  900,  900,
     902,  903,  902,  898,  894,  904,  897,  895,
     897,  901,  904,  904,  905,  901,  901,  900,
     900,  903,  904,  908,  911,  908,  902,  906,
     899,  902,  903,  906,  905,  903,  907,  903,
     898,  899,  900,  903,  902,  905,  904,  902,
     899,  901,  901,  901,  900,  901,  900,  900,
];
#[rustfmt::skip]
const KING: [i32; 64] = [
      17,   10,   -4,  -17,  -21,  -22,    0,  -23,
      31,   10,    6,  -11,  -14,  -13,    2,   -9,
      -1,   11,    6,   10,   10,    7,   -3,  -11,
       5,    3,    3,    1,    8,   13,    7,    1,
      -6,   -1,   11,    9,    6,   11,    6,    2,
       3,    4,    4,    4,    5,    3,   -4,   -1,
     -11,   -4,   -5,   -1,   -1,   -3,    1,   -1,
     -16,  -10,   -5,   -0,   -1,   -8,   -1,   -1,
];
